{"version":3,"sources":["comporents/inputTodo.jsx","App.jsx","index.js"],"names":["InputTodo","props","TodoText","onClick","onChange","className","placeholder","value","onchange","App","useState","setTodoText","inCompleteTodos","setinCompleteTodos","CompleteList","setCompleteList","event","target","newTodos","map","todo","index","newIncompleteTodos","splice","newCompleteTodos","onClickCompleate","onClickDelete","onClickBack","ReactDom","render","document","getElementById"],"mappings":"mLAYeA,EAVG,SAACC,GAClB,IAAQC,EAAgCD,EAAhCC,SAAoBC,GAAYF,EAAtBG,SAAsBH,EAAZE,SAC5B,OACC,sBAAKE,UAAU,aAAY,UAC1B,uBAAOC,YAAY,yBAAUC,MAAOL,EAAUE,SAAUI,WACxD,wBAAQL,QAASA,EAAQ,SAAC,mBAG7B,EC6FeM,EAlGH,WACX,MAAgCC,mBAAS,IAAG,mBAArCR,EAAQ,KAAES,EAAW,KAE5B,EAA8CD,mBAAS,IAIrD,mBAJKE,EAAe,KAAEC,EAAkB,KAM1C,EAAwCH,mBAAS,IAE/C,mBAFKI,EAAY,KAAEC,EAAe,KAyCpC,OACC,qCAKC,cAAC,EAAS,CACTb,SAAUA,EACVE,SA7CsB,SAACY,GACzBL,EAAYK,EAAMC,OAAOV,MAC1B,EA4CGJ,QA1CgB,WAElB,GAAiB,KAAbD,EAAJ,CACA,IAAMgB,EAAQ,sBAAON,GAAe,CAAEV,IACtCW,EAAmBK,GACnBP,EAAY,GAHe,CAI5B,IAqCK,IAAI,SAEP,sBAAKN,UAAU,kBAAiB,UAC/B,mBAAGA,UAAU,QAAO,SAAC,iCACrB,6BACEO,EAAgBO,KAAI,SAACC,EAAMC,GAE3B,OACC,6BACC,sBAAKhB,UAAU,WAAU,UACxB,4BAAIe,IACJ,wBAAQjB,QAAS,kBAvCA,SAACkB,GACzB,IAAMC,EAAkB,YAAOV,GAC/BU,EAAmBC,OAAOF,EAAO,GAEjC,IAAMG,EAAgB,sBAAOV,GAAY,CAAEF,EAAgBS,KAC3DR,EAAmBS,GACnBP,EAAgBS,EACjB,CAgC+BC,CAAiBJ,EAAM,EAAC,SAAC,iBAChD,wBAAQlB,QAAS,kBA/CH,SAACkB,GAEtB,IAAMH,EAAQ,YAAON,GACrBM,EAASK,OAAOF,EAAO,GACvBR,EAAmBK,EACpB,CA0C+BQ,CAAcL,EAAM,EAAC,SAAC,qBAJtCD,EAQX,SAGF,sBAAKf,UAAU,gBAAe,UAC7B,mBAAGA,UAAU,QAAO,SAAC,2BACrB,6BACES,EAAaK,KAAI,SAACC,EAAMC,GACxB,OACC,6BACC,sBAAKhB,UAAU,WAAU,UACxB,4BAAIe,IACJ,wBAAQjB,QAAS,kBA9CL,SAACkB,GACpB,IAAMG,EAAgB,YAAOV,GAC7BU,EAAiBD,OAAOF,EAAO,GAE/B,IAAMC,EAAkB,sBAAOV,GAAe,CAAEE,EAAaO,KAC7DR,EAAmBS,GACnBP,EAAgBS,EACjB,CAuC+BG,CAAYN,EAAM,EAAC,SAAC,qBAI/C,WAKL,ECjGAO,IAASC,OAAO,cAAC,EAAG,IAAKC,SAASC,eAAe,Q","file":"static/js/main.a013c19a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst InputTodo = (props) => {\r\n\tconst { TodoText, onChange, onClick } = props;\r\n\treturn (\r\n\t\t<div className=\"input_area\">\r\n\t\t\t<input placeholder=\"TODOを追加\" value={TodoText} onChange={onchange} />\r\n\t\t\t<button onClick={onClick}>追加</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default InputTodo;\r\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport InputTodo from \"./comporents/inputTodo\";\nimport IncompleteTodos from \"./comporents/InCompleteTodos\";\n\nconst App = () => {\n\tconst [TodoText, setTodoText] = useState(\"\");\n\n\tconst [inCompleteTodos, setinCompleteTodos] = useState([\n\t\t//useStateは[]の中（配列）の可変のものと変更させるものを…\n\t\t// \"あああ\",\n\t\t// \"いいい\"\n\t]);\n\n\tconst [CompleteList, setCompleteList] = useState([\n\t\t// \"うううううう\"\n\t]);\n\n\tconst onchangeTodoText = (event) => {\n\t\tsetTodoText(event.target.value);\n\t}; //inputを取得する？valueを機能させる？基本構文である。eventとかもそう。\n\n\tconst onClickAdd = () => {\n\t\t// alert();\n\t\tif (TodoText === \"\") return; //省略した書き方　何もせず処理終了の意味\n\t\tconst newTodos = [...inCompleteTodos, TodoText]; //何個かいれるときは...使う\n\t\tsetinCompleteTodos(newTodos);\n\t\tsetTodoText(\"\");\n\t};\n\n\tconst onClickDelete = (index) => {\n\t\t// alert();\n\t\tconst newTodos = [...inCompleteTodos];\n\t\tnewTodos.splice(index, 1); //spliceは複数のデータのうち１つを消す。２つの引数をとる　1つ目は何番目か２つ目は何個消すか\n\t\tsetinCompleteTodos(newTodos);\n\t};\n\n\tconst onClickCompleate = (index) => {\n\t\tconst newIncompleteTodos = [...inCompleteTodos];\n\t\tnewIncompleteTodos.splice(index, 1);\n\n\t\tconst newCompleteTodos = [...CompleteList, inCompleteTodos[index]];\n\t\tsetinCompleteTodos(newIncompleteTodos);\n\t\tsetCompleteList(newCompleteTodos);\n\t};\n\n\tconst onClickBack = (index) => {\n\t\tconst newCompleteTodos = [...CompleteList];\n\t\tnewCompleteTodos.splice(index, 1);\n\n\t\tconst newIncompleteTodos = [...inCompleteTodos, CompleteList[index]];\n\t\tsetinCompleteTodos(newIncompleteTodos);\n\t\tsetCompleteList(newCompleteTodos);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{/* <div className=\"input_area\">\n        <input placeholder=\"TODOを追加\" value={TodoText} onChange={onchangeTodoText}/>\n        <button onClick={onClickAdd}>追加</button>\n      </div> */}\n\t\t\t<InputTodo\n\t\t\t\tTodoText={TodoText}\n\t\t\t\tonChange={onchangeTodoText}\n\t\t\t\tonClick={onClickAdd}\n\t\t\t/>{\" \"}\n\t\t\t　{/*上から順番に処理して、ここまできたらinputTOdoのファイルに飛ぶ */}\n\t\t\t<div className=\"imcomplete_area\">\n\t\t\t\t<p className=\"title\">未完了のTODO</p>\n\t\t\t\t<ul>\n\t\t\t\t\t{inCompleteTodos.map((todo, index) => {\n\t\t\t\t\t\t//map関数でループを作る.持っている配列の文だけループする。持っている配列の分をDom…\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={todo}>\n\t\t\t\t\t\t\t\t<div className=\"list_row\">\n\t\t\t\t\t\t\t\t\t<p>{todo}</p>\n\t\t\t\t\t\t\t\t\t<button onClick={() => onClickCompleate(index)}>完了</button>\n\t\t\t\t\t\t\t\t\t<button onClick={() => onClickDelete(index)}>削除</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div className=\"complete_area\">\n\t\t\t\t<p className=\"title\">完了のTODO</p>\n\t\t\t\t<ul>\n\t\t\t\t\t{CompleteList.map((todo, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<div className=\"list_row\">\n\t\t\t\t\t\t\t\t\t<p>{todo}</p>\n\t\t\t\t\t\t\t\t\t<button onClick={() => onClickBack(index)}>戻す</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport App from \"./App\";\n\nReactDom.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}